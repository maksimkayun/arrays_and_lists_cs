1. Big numbers
Напишите программу, которая находит самые большие верхние целые
числа в массиве. Большое верхнее число – число, которое больше всех
элементов справа
in: 1 4 3 2 out: 4 3 2
in: 14 24 3 19 15 17 out: 24 19 17
in: 27 19 42 2 13 45 48 out: 48

==============================================================================================

2. Changing list
Напишите программу, которая читает список целых чисел из консоли и 
получает команды, которые управляют списком. Ваша программа может 
получать следующие команды:
• Delete {элемент} - удалить все элементы в массиве, которые равны 
данному элементу
• Insert {элемент} {позиция} - вставить элемент и заданную позицию
Программа должна остановиться, когда получит команду «end». Выведите 
все числа в массиве, разделенные одним пробелом
input:
1 2 3 4 5 5 5 6
Delete 5
Insert 10 1
Delete 5
end
output:
1 10 2 3 4 6

input:
20 12 4 319 21 31234 2 41 23 4
Insert 50 2
Insert 50 5
Delete 4
end
output:
20 12 50 319 50 21 31234 2 41 23

input:
1 2 3 4 5 5 5 6
Delete 5
Insert 10 1
Delete 5
end
output:
1 10 2 3 4 6

==============================================================================================

3. Common elements
Напишите программу, которая печатает общие элементы в двух массивах. 
Вы должны сравнить элементы второго массива с элементами первого.

in: Hey hello 2 4   out: 4 hello
    10 hey 4 hello

in: S of t un i     out: of i un
    of i 10 un

in: i love to code  out: code i love to
    code i love to

==============================================================================================

4. Magic sum
Напишите программу, которая печатает все уникальные пары в массиве 
целых чисел, сумма которых равна заданному числу.

in: 1 7 6 2 19 23   out: 1 7
    8                    6 2
  

in: 14 20 60 13 7 19 8  out: 14 13
    27                       20 7
                             19 8
    
==============================================================================================

5. Rotation of array
Напишите программу, которая получает массив и количество вращений, 
которые она должна выполнить (одно вращение – сдвиг влево (первый 
элемент станет последним, второй - первым так далее)). Выведите 
итоговый массив.

in: 51 47 32 61 21  out: 32 61 21 51 47
    2

int: 32 21 61 1     out: 32 21 61 1
     4

int: 2 4 15 31      out: 4 15 31 2
     5

==============================================================================================

6. Train
Программа получает на вход количество вагонов в поезде, а затем в 
отдельных строках количество пассажиров, которые поедут в 
соответствующем вагоне. Программа должна вывести весь поезд, и в 
конце сумму всех пассажиров в поезде.

in:
3
13
24
8
out:
13 24 8
45

in:
6
3
52
71
13
65
4
out:
3 52 71 13 65 4
208

==============================================================================================

7. Train work list
В первой строке программе будет предоставлен список вагонов (целых 
чисел). Каждое целое число представляет количество пассажиров, 
которые в настоящее время находятся в каждом вагоне. 
В следующей строке программе будет предоставлена максимальная
вместимость каждого вагона (одно целое число). Пока вы не получите 
«end», программа может ожидать два типа ввода:
• Add {пассажиров} - добавить вагон в конец с указанным 
количеством пассажиров.
• {пассажиры} - найти существующий вагон, подходящий для
добавления всех пассажиров (начиная с первого вагона)
В конце программа выводит окончательное состояние поезда (все вагоны 
разделены пробелом)

in: 32 54 21 12 4 0 23
    75
    Add 10
    Add 0
    30
    10
    75
    end
out: 72 54 21 12 4 75 23 10 0

in: 0 0 0 10 2 4
    10
    Add 10
    10
    10
    10
    8
    6
    end
out: 10 10 10 10 10 10 10

==============================================================================================

8. Working with list
Программе будет предоставлен список целых чисел в первой строке 
ввода. Пока вы не получите «End», программе будут предоставлены 
операции, которые она должна применить к списку. Возможные команды:
• Add {число} - добавить элемент в конец
• Insert {число} {индекс} - вставить элемент по указанному индексу
• Remove {index} – удалить элемент по индексу
• Shift left {count} – сдвиг влево всех элементов (количество раз)
• Shift right {count} – сдвиг вправо всех элементов (количество раз)
Примечание: возможно, что указанный индекс находится за 
пределами списка. В этом случае выведите «Invalid index».

in: 1 23 29 18 43 21 20 
    Add 5
    Remove 5
    Shift left 3
    Shift left 1
    End
out: 43 20 5 1 23 29 18

in: 5 12 42 95 32 1
    Insert 3 0
    Remove 10
    Insert 8 6
    Shift right 1
    Shift left 2
    End
out: Invalid index
     5 12 42 95 32 8 1 3